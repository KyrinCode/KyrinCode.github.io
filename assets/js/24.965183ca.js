(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{626:function(t,a,s){"use strict";s.r(a);var r=s(4),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("介绍公私钥的应用场景")]),t._v(" "),s("h2",{attrs:{id:"版权保护："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版权保护："}},[t._v("#")]),t._v(" 版权保护：")]),t._v(" "),s("p",[t._v("内容通过私钥加密得到数字签名，内容通过哈希算法得到数字摘要，将两者上链。通过公钥解密数字签名得到原始内容，再经过哈希算法与数字摘要比较，只有版权所有者持有私钥才能生成这个数字签名。")]),t._v(" "),s("h2",{attrs:{id:"文件完整性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件完整性"}},[t._v("#")]),t._v(" 文件完整性")]),t._v(" "),s("p",[t._v("A给B发一个文件，B怎么知道他接收的文件是A发的原始文件？")]),t._v(" "),s("p",[t._v("A先对文件进行摘要处理（又称Hash，常见的哈希算法有MD5、SHA等）得到一串摘要信息，然后用自己的私钥将摘要信息加密同文件发给B，B收到加密串和文件后，再用A的公钥来解密加密串，得到原始文件的摘要信息，与此同时，对接收到的文件进行摘要处理，然后两个摘要信息进行对比，如果自己算出的摘要信息与收到的摘要信息一致，说明文件是A发过来的原始文件，没有被篡改。否则，就是被改过的。")]),t._v(" "),s("h2",{attrs:{id:"零知识证明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零知识证明"}},[t._v("#")]),t._v(" 零知识证明")]),t._v(" "),s("p",[t._v("A给出一个随机值，并使用B的公钥对其加密，然后将加密后的数据交给B，B用自己的私钥解密并展示给A，如果与A给出的随机值相同，则证明对方是B。")]),t._v(" "),s("p",[t._v("A给出一个随机值，然后数据交给B，B使用私钥对其加密，B将加密后的密文展示给A，A用B的公钥解密，如果与A给出的随机值相同，则证明对方是B。")])])}),[],!1,null,null,null);a.default=e.exports}}]);